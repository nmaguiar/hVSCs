# Author: Nuno Aguiar
todo:
- Setup reverse proxy
- Start SSH daemon
- Start docker
- Install VSCode extensions
- Prepare VSC settings
- Start K3D
- Start K3D socks server
- Report

ojob:
  async       : true
  opacks      :
  - openaf: 20220822
  - oJob-common
  catch       : if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: true   # to change when finished
  argsFromEnvs: true
  numThreads  : 2

include:
- ojob.yaml

jobs:
- name: Report
  type: shutdown
  to  : ojob report

# ==========================
- name : Setup reverse proxy
  lang : shell
  exec : |
    {{#if NOHTTPS}}
    echo no HTTPS reverse proxy started
    {{else}}
    ojob /home/openvscode-server/.rp.yaml url=http://127.0.0.1:3000 port=8443 websocket=true ssl=hvscs sslvalid=525600
    {{/if}}

# ============================
- name : Set SSH user password
  exec : |
    if (isDef(getEnv("SSH_PASS"))) {
      log("Setting SSH user password...")
      $sh("echo \"openvscode-server:$SSH_PASS\" | sudo chpasswd")
      .prefix("chpasswd")
      .exec()
    }

# =======================
- name : Start SSH daemon
  from :
  - Set SSH user password
  lang : shell
  exec : |
    {{#if NOSSH}}
    echo SSH not started
    {{else}}
    sudo service ssh start
    {{/if}}

# ===================
- name : Start docker
  lang : shell
  exec : |
    {{#if NODOCKER}}
    echo Docker not started
    {{else}}
    sudo update-alternatives --set iptables /usr/sbin/iptables-legacy
    echo updated
    sudo service docker start 
    {{/if}}

# -----------------------------------
- name : Wait for VSCode remote agent
  exec : |
    if (isDef(getEnv("NOVSCODE"))) return 

    log("Waiting for VSCode IPC...")
    while( $from(io.listFiles("/tmp").files)
           .starts("filename", "vscode-ipc-")
           .count() == 0 ) {
      sleep(1000, true)
    }

    log("Waiting for remote agent start...")
    if (isUnDef(global.envs)) global.envs = {}
    global.envs["VSCODE_IPC_HOOK_CLI"] = $from(io.listFiles("/tmp").files).starts("filename", "vscode-ipc-").last().canonicalPath

    while( $from(listFilesRecursive("/home/workspace/.openvscode-server/data/logs"))
           .starts("filename", "remoteagent.log")
           .count() == 0 || io.readFileString($from(listFilesRecursive("/home/workspace/.openvscode-server/data/logs"))
                                              .starts("filename", "remoteagent.log")
                                              .at(0)
                                              .canonicalPath).indexOf("Extension host agent started.") < 0 ) {
      sleep(1000, true)
    }

# ================================
- name : Install VSCode extensions
  from : Wait for VSCode remote agent
  each : Install VSCode extension
  catch: sprintErr(exception)
  exec : |
    $from(io.listFiles("/tmp/.extensions").files)
    .ends("filename", ".vsix")
    .select(f => {
      if (isDef(args.NOK8S) && f.filename.indexOf("-kubernetes-") >= 0) return
      if (isDef(args.NODOCKER) && f.filename.indexOf("-docker-") >= 0) return
      log("installing extension " + f.filename + "...")
      $sh("/home/.openvscode-server/bin/remote-cli/openvscode-server --install-extension " + f.canonicalPath)
      .envs(global.envs, true)
      .exec(0) 
    })

# ===========================
- name : Prepare VSC settings
  exec : |
    if (isDef(getEnv("NOVSCODE"))) return 

    io.writeFileJSON("/home/workspace/.openvscode-server/data/User/settings.json", {
      "workbench.startupEditor": "readme", 
      "workbench.colorTheme"   : "GitHub Light Default"
    })
    io.writeFileJSON("/home/workspace/.openvscode-server/data/Machine/settings.json", {
      "workbench.startupEditor": "readme",
      "workbench.colorTheme"   : "GitHub Light Default"
    })

# -------------------------------
- name : Wait for Docker to start
  exec : |
    var ec
    do {
      sleep(1000, true)
      ec = $sh("docker version").get(0).exitcode
    } while(ec != 0)
    log("Docker is ready")

# ================
- name : Start K3D
  typeArgs:
    shellPrefix: k3d
  from : Wait for Docker to start
  lang : shell
  exec : |
    export USER=openvscode-server
    export HOME=/home/workspace
    echo export HOME=/home/workspace >> /home/openvscode-server/.bashrc
    . $HOME/.profile
    {{#if NOK8S}}
      echo K8S not started
    {{else}}
      {{#if NOPUBLIC}}
      k3d cluster create --k3s-arg "--snapshotter=native@server:*" --registry-create registry:5000 -p "127.0.0.1:1080:1080@loadbalancer"
      {{else}}
      k3d cluster create --k3s-arg "--snapshotter=native@server:*" --registry-create registry:5000 -p "0.0.0.0:1080:1080@loadbalancer"
      {{/if}}
    {{/if}}

# =============================
- name : Start K3D socks server
  typeArgs:
    shellPrefix: socks
    shell      : /bin/bash -s
  deps :
  - Start K3D
  lang : shell
  exec : |
    #!/usr/bin/env bash
    
    export USER=openvscode-server
    export HOME=/home/workspace
    echo export HOME=/home/workspace >> /home/openvscode-server/.bashrc
    . $HOME/.profile

    {{#if NOK8S}}
    {{#if NODOCKER}}{{else}}
    docker run --rm -d -p 1080:1080 nmaguiar/socksd 
    {{/if}}
    {{else}}
    while (! kubectl version --output=json > /dev/null 2>&1 ); do
      sleep 1
    done

    /usr/bin/ojob ojob.io/kube/genSocksServer | kubectl -n kube-system apply -f - 
    kubectl expose -n kube-system deploy socks-server --type=LoadBalancer
    #while [[ $(kubectl get pods -n kube-system -l app=socks-server -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do
    #  sleep 2
    #done
    {{/if}}
